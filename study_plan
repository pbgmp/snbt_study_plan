import json
from datetime import datetime, timedelta

def main():
    benchmark_score = get_minimum_score() #run the function and store the value in benchmark_score
    skor_tryout = user_input_score() #run the function to values about user try out score
    check_input_score(skor_tryout) #for score 0, check if they want to do tryout now or not
    level_of_competence(skor_tryout, benchmark_score) #categorize student tryout score into three level
    day_difference, start_studying_date = counts_days() #count how many days left before exam
    subtest_category = level_of_competence(skor_tryout, benchmark_score)
    interval_time(start_studying_date, day_difference, subtest_category) #calculate retention interval based on subtest level


def get_minimum_score():
    with open("program_university.json", "r") as file:
        program_university = json.load(file)
    
    major_score = program_university["major_score"]

    university = input("Apa universitas targetmu? ").strip().title()
    user_major = input("Apa jurusan yang menjadi target utamamu? ").strip().title()
    
    with open("alias_major.json", "r") as file:
        alias_major = json.load(file)
    major_dict = alias_major.get(university, {})
    major = major_dict.get(user_major, user_major)

    benchmark_score = major_score[university][major]
    print()
    print(f"Dengan jurusan {major} di {university}, kamu setidaknya harus mencapai skor SNBT {benchmark_score}.")
    return benchmark_score 
    
def user_input_score():
    print("Tulis skor tryout SNBT terbaru. Apabila belum pernah tryout, maka isi angka 0.")
    print()

    questions = {
        "PU": "Kemampuan Penalaran Umum:",
        "PK": "Kemampuan Kuantitatif:",
        "PPU": "Pengetahuan dan Pemahaman Umum:",
        "PBM": "Pemahaman Bacaan dan Menulis:",
        "LBI": "Literasi Bahasa Indonesia:",
        "LBE": "Literasi Bahasa Inggris:",
        "PM": "Penalaran Matematika:"
    }
    print()

    skor_tryout = {}
    for key, prompt in questions.items():
        while True:
            try:
                skor_tryout[key]= float(input(f"{prompt}"))
                break
            except:
                print("Format skor salah. Silahkan ketik ulang.")
    
    return skor_tryout

def check_input_score(skor_tryout):
    assesment_link= "https://www.google.com"
    if all(value == 0 for value in skor_tryout.values()):
        tryout_now = input("Apakah kamu ingin mengerjakan tryout sekarang?(ya/tidak) ")
        if tryout_now == "ya":
            print(f"Silahkan kerjakan disini {assesment_link}")
            return
   

    """sorted_skor_tryout = sorted(skor_tryout.items(), key=lambda value: value[1])"""

def level_of_competence(skor_tryout, benchmark_score):
    RED = []
    YELLOW = []
    GREEN = []

    interval_by_color = {
        "RED":[], 
        "YELLOW": [],
        "GREEN": []
        }
    
    for subtest, score in skor_tryout.items():
        score_percentile = float((score/benchmark_score) * 100)
        if score_percentile <= 59.0 :
            RED.append(subtest)
        elif score_percentile > 59.0 and score_percentile <= 89.0 :
            YELLOW.append(subtest)
        else:
            GREEN.append(subtest)
  
    return {"RED": RED, "YELLOW": YELLOW, "GREEN": GREEN}
 
def subtest_category(interval_by_color):
    red_subtest= ', '.join(interval_by_color["RED"])
    yellow_subtest= ', '.join(interval_by_color["YELLOW"])
    green_subtest= ', '.join(interval_by_color["GREEN"])
    subtest_sorted= ["red_subtest", "yellow_subtest", "green_subtest"]
   

def counts_days():    
    while True:
        print()
        date_str = input("Kapan kamu mau mulai belajar untuk persiapan SNBT? (Isi dengan format HH-BB-TT)")
        try:
            start_studying_date = datetime.strptime(date_str, "%d-%m-%Y")
            break
        except:
            print("Format salah. Mohon tulis tanggal dengan format HH-BB-TT (contoh: 12-12-2025)")

    exam_period_str = "23-04-2026"
    exam_period = datetime.strptime(exam_period_str, "%d-%m-%Y")

    difference = exam_period - start_studying_date
    day_difference = difference.days

    print(f"Ada {day_difference} hari sebelum periode SNBT")

    return day_difference, start_studying_date

def interval_time(start_studying_date, day_difference, subtest_category):
    
    retention_interval= {
        "RED": timedelta(days=int(0.1 * day_difference)), 
        "YELLOW": timedelta(days=int(0.15 * day_difference)), 
        "GREEN": timedelta(days=int(0.2 * day_difference))
    }

    current_day = datetime.now()
    tomorrow = current_day + timedelta(days=1)

    print()
    print("STUDY PLAN")
    print()
    print("Setiap kamu belajar satu topik, review topik tersebut keesokan harinya.")
    print(f"Contoh: Belajar PK hari {current_day.strftime('%d-%m-%Y')}, maka ulangi kembali pada tanggal {tomorrow.strftime('%d-%m-%Y')}")
    print()
    print(f"Untuk subtest {subtest_category['RED']}, ulangi setiap {retention_interval['RED'].days} hari.")
    print(f"Untuk subtest {subtest_category['YELLOW']}, ulangi setiap {retention_interval['YELLOW'].days} hari. ")
    print(f"Untuk subtest {subtest_category['GREEN']}, ulangi setiap {retention_interval['GREEN'].days} hari. ")



if __name__ == '__main__':
    main()
